name: Continuous Integration

# Solo se ejecuta el CI con commits en master o en pull requests.
on:
  pull_request:
  push:
    branches: master

jobs:
  # Obtenemos todos los conjuntos de tests
  list-python-tests:
    name: List python tests
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - id: list_dirs
        run: |
          TEST_FILES=$(ls | jq -cnR '[inputs | select(length>0) | select(. | contains("test_")) | rtrimstr(".py")]')
          echo "::set-output name=matrix::$TEST_FILES"
    
  # Tests con el procedimiento estándar
  python-tests:
    name: Python tests
    runs-on: ubuntu-20.04
    needs: list-python-tests
    strategy:
      matrix:
        test-path: ${{fromJson(needs.list-python-tests.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up backend
        run: |
          cp .env.example .env
          docker-compose build
          docker-compose up -d
      - name: Run tests
        run: docker-compose run api /usr/local/bin/python -m unittest -v tests.${{ matrix.test-path }}

  # Linter con flake8
  python-linter:
    name: Python linter
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: Install linter
        run: python -m pip install flake8
      - name: Run linter
        run: python -m flake8 .

  # Formatter con black e isort
  python-fmt:
    name: Python formatting
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: Install formatting tools
        run: python -m pip install black isort
      - name: Run black
        run: python -m black . --check
      - name: Run isort
        run: python -m isort . --check

  # Asegura que los docs compilen correctamente también
  python-docs:
    name: Python docs
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: Set up dependencies
        run: pip install -e .[docs]
      - name: Attempt to compile
        # With warnings as errors
        run: cd docs && make html SPHINXOPTS="-W"
